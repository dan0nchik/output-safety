version: '3.8'
services:

  # ─── Zookeeper ──────────────────────────────────────────────────────────
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    network_mode: host

  # ─── Kafka ──────────────────────────────────────────────────────────────
  kafka:
    image: confluentinc/cp-kafka:7.4.1
    depends_on:
      - zookeeper
    network_mode: host
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 127.0.0.1:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://84.201.147.126:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 10

  # ─── MongoDB ─────────────────────────────────────────────────────────────
  mongo:
    image: mongo:6.0
    restart: unless-stopped
    container_name: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - backend

  # ─── API ────────────────────────────────────────────────────────────────
  api:
    build:
      context: .
      dockerfile: presentation/Dockerfile
    container_name: api
    depends_on:
      kafka:
        condition: service_healthy
      mongo:
        condition: service_started
    ports:
      - "8000:8000"
    networks:
      - backend
    env_file:
      - .env

  # ─── Aggregator ────────────────────────────────────────────────────────────────
  aggregator:
    build:
      context: .
      dockerfile: workers/aggregator/Dockerfile
    container_name: aggregator
    depends_on:
      kafka:
        condition: service_healthy
      mongo:
        condition: service_started
    restart: unless-stopped
    env_file:
      - .env
    networks:
    - backend

  opensearch:
    image: 'opensearchproject/opensearch:2.12.0'
    container_name: opensearch
    environment:
      - cluster.name=opensearch-cluster
      - node.name=opensearch
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
      - "DISABLE_INSTALL_DEMO_CONFIG=true"
      - "DISABLE_SECURITY_PLUGIN=true"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - 'opensearch-data:/usr/share/opensearch/data'
    restart: always
    networks:
      - backend

  graylog:
    image: 'graylog/graylog:6.0'
    container_name: graylog
    env_file:
      - .env
    environment:
      - GRAYLOG_PASSWORD_SECRET=${GRAYLOG_PASSWORD_SECRET}
      - GRAYLOG_ROOT_PASSWORD_SHA2=${GRAYLOG_ROOT_PASSWORD_SHA2}
      - GRAYLOG_MONGODB_URI=${GRAYLOG_MONGODB_URI}
      - GRAYLOG_ELASTICSEARCH_HOSTS=http://opensearch:9200
      - GRAYLOG_HTTP_EXTERNAL_URI=http://127.0.0.1:9000/
    depends_on:
      - opensearch
    ports:
      # Веб-интерфейс Graylog
      - '9000:9000'
      # Входы для логов (Inputs)
      - '5044:5044/tcp'  # Beats
      - '514:514/udp'    # Syslog
      - '12201:12201/udp' # GELF
    restart: always
    networks:
      - backend


volumes:
  mongo-data:
  opensearch-data:
    driver: local 

networks:
  backend:
    driver: bridge
