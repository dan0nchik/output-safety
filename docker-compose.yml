version: '3.8'

services:

  # ─── Zookeeper ──────────────────────────────────────────────────────────
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - backend

  # ─── Kafka ──────────────────────────────────────────────────────────────
  kafka:
    image: confluentinc/cp-kafka:7.4.1
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    networks:
      - backend
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://84.201.147.126:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 10

  # ─── MongoDB ─────────────────────────────────────────────────────────────
  mongodb:
    image: "mongo:6.0"
    restart: "on-failure"
    networks:
      - backend
    volumes:
      - "mongodb_data:/data/db"
      - "mongodb_config:/data/configdb"

  mongo:
    image: mongo:6.0
    restart: unless-stopped
    container_name: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - backend

  # ─── API ────────────────────────────────────────────────────────────────
  api:
    build:
      context: .
      dockerfile: presentation/Dockerfile
    container_name: api
    depends_on:
      kafka:
        condition: service_healthy
      mongo:
        condition: service_started
    ports:
      - "8000:8000"
    networks:
      - backend
    env_file:
      - .env

  # ─── Aggregator ────────────────────────────────────────────────────────────────
  aggregator:
    build:
      context: .
      dockerfile: workers/aggregator/Dockerfile
    container_name: aggregator
    depends_on:
      kafka:
        condition: service_healthy
      mongo:
        condition: service_started
    restart: unless-stopped
    env_file:
      - .env
    networks:
      - backend

  # ─── Graylog 6.1 ────────────────────────────────────────────────────────────────
  graylog:
    image: "${GRAYLOG_IMAGE:-graylog/graylog:6.1}"
    container_name: graylog
    hostname: "server"
    env_file:
      - .env
    environment:
      GRAYLOG_NODE_ID_FILE: "/usr/share/graylog/data/data/node-id"
      GRAYLOG_PASSWORD_SECRET: "${GRAYLOG_PASSWORD_SECRET:?Please configure GRAYLOG_PASSWORD_SECRET in the .env file}"
      GRAYLOG_ROOT_PASSWORD_SHA2: "${GRAYLOG_ROOT_PASSWORD_SHA2:?Please configure GRAYLOG_ROOT_PASSWORD_SHA2 in the .env file}"
      GRAYLOG_HTTP_BIND_ADDRESS: "0.0.0.0:9000"
      GRAYLOG_HTTP_EXTERNAL_URI: "http://127.0.0.1:9000/"
      GRAYLOG_MONGODB_URI: "mongodb://mongodb:27017/graylog"
    depends_on:
      mongodb:
        condition: "service_started"
      datanode:
        condition: "service_started"
    entrypoint: "/usr/bin/tini --  /docker-entrypoint.sh"
    ports:
      - "5044:5044/tcp"
      - "5140:5140/udp"
      - "5140:5140/tcp"
      - "5555:5555/tcp"
      - "5555:5555/udp"
      - "9000:9000/tcp"
      - "12201:12201/tcp"
      - "12201:12201/udp"
      - "13301:13301/tcp"
      - "13302:13302/tcp"
    volumes:
      - "graylog_data:/usr/share/graylog/data/data"
    restart: "on-failure"
    networks:
      - backend

  # ─── Graylog DataNode ──────────────────────────────────────────────────────────
  datanode:
    image: "${DATANODE_IMAGE:-graylog/graylog-datanode:6.1}"
    hostname: "datanode"
    environment:
      GRAYLOG_DATANODE_NODE_ID_FILE: "/var/lib/graylog-datanode/node-id"
      GRAYLOG_DATANODE_PASSWORD_SECRET: "${GRAYLOG_PASSWORD_SECRET:?Please configure GRAYLOG_PASSWORD_SECRET in the .env file}"
      GRAYLOG_DATANODE_MONGODB_URI: "mongodb://mongodb:27017/graylog"
    ulimits:
      memlock:
        hard: -1
        soft: -1
      nofile:
        soft: 65536
        hard: 65536
    ports:
      - "8999:8999/tcp"
      - "9200:9200/tcp"
      - "9300:9300/tcp"
    networks:
      - backend
    volumes:
      - "graylog-datanode:/var/lib/graylog-datanode"
    restart: "on-failure"


volumes:
  mongodb_data:
  mongodb_config:
  graylog-datanode:
  graylog_data:
  mongo-data:
  opensearch-data:
    driver: local

networks:
  backend:
    driver: bridge
