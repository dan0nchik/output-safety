services:

  # ─── Zookeeper ──────────────────────────────────────────────────────────
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - backend

  # ─── Kafka ──────────────────────────────────────────────────────────────
  kafka:
    image: confluentinc/cp-kafka:7.4.1
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://84.201.147.126:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - backend

  # ─── MongoDB ─────────────────────────────────────────────────────────────
  mongo:
    image: mongo:5.0
    restart: unless-stopped
    container_name: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - backend

  # ─── API ────────────────────────────────────────────────────────────────
  api:
    build:
      context: .
      dockerfile: presentation/Dockerfile
    container_name: api
    depends_on:
      kafka:
        condition: service_healthy
      mongo:
        condition: service_started
    ports:
      - "8000:8000"
    env_file:
      - .env
    networks:
      - backend

  # ─── Aggregator ─────────────────────────────────────────────────────────
  aggregator:
    build:
      context: .
      dockerfile: workers/aggregator/Dockerfile
    container_name: aggregator
    depends_on:
      kafka:
        condition: service_healthy
      mongo:
        condition: service_started
    restart: unless-stopped
    env_file:
      - .env
    networks:
      - backend

  # ─── PostgreSQL для Redash ──────────────────────────────────────────────
  postgres:
    image: postgres:13
    container_name: redash-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: redash
      POSTGRES_PASSWORD: redash_pass
      POSTGRES_DB: redash
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - backend

  # ─── Redis для Redash ───────────────────────────────────────────────────
  redis:
    image: redis:6
    container_name: redash-redis
    restart: unless-stopped
    volumes:
      - redis-data:/data
    networks:
      - backend

  # ─── Redash ────────────────────────────────────────────────────────────
  redash:
    image: redash/redash:latest   # или latest
    container_name: redash
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      REDASH_DATABASE_URL: "postgresql://redash:redash_pass@postgres/redash"
      REDASH_REDIS_URL: "redis://redis:6379/0"
    depends_on:
      - postgres
      - redis
    networks:
      - backend

volumes:
  mongo-data:
  postgres-data:
  redis-data:

networks:
  backend:
    driver: bridge